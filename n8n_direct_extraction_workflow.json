{
  "name": "Direct Movie Search with Streaming URLs",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "search-movies",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Movie Search Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "search-movies"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate search parameters\nconst query = $input.first().json.query?.query || $input.first().json.query || '';\nconst maxResults = parseInt($input.first().json.query?.max_results || $input.first().json.max_results || 10);\n\n// Validate input\nif (!query || query.trim().length === 0) {\n  return [{\n    json: {\n      error: 'Missing search query',\n      message: 'Please provide a search term',\n      results: []\n    }\n  }];\n}\n\nconsole.log(`üé¨ Starting direct extraction search for: \"${query}\" (max: ${maxResults})`);\n\n// Prepare search configuration\nconst searchConfig = {\n  query: query.trim(),\n  maxResults: maxResults,\n  baseUrl: 'https://www.5movierulz.chat',\n  searchUrl: `https://www.5movierulz.chat/search_movies?s=${encodeURIComponent(query.trim())}`,\n  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'\n};\n\nreturn [{ json: searchConfig }];"
      },
      "id": "input-config",
      "name": "Input Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.searchUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "={{ $json.userAgent }}"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch-search-page",
      "name": "Fetch Search Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract movie URLs and fetch streaming URLs directly\nconst input = $input.first().json;\nconst html = input.data || '';\nconst query = $('Input Config').first().json.query;\nconst maxResults = $('Input Config').first().json.maxResults;\nconst baseUrl = $('Input Config').first().json.baseUrl;\nconst userAgent = $('Input Config').first().json.userAgent;\n\nconsole.log(`üé≠ DIRECT: Extracting movies with streaming URLs for \"${query}\"`);\nconsole.log(`üìÑ HTML length: ${html.length} chars`);\n\nif (!html || html.length < 100) {\n  console.log('‚ùå No HTML data received');\n  return [{\n    json: {\n      query: query,\n      results: [],\n      count: 0,\n      error: 'No HTML data'\n    }\n  }];\n}\n\nconst movies = [];\n\ntry {\n  // Find all film elements\n  const filmDivRegex = /<div[^>]*class[^>]*film[^>]*>([\\s\\S]*?)<\\/div>/gi;\n  const filmMatches = [...html.matchAll(filmDivRegex)];\n  \n  console.log(`üì¶ Found ${filmMatches.length} film elements`);\n  \n  if (filmMatches.length === 0) {\n    console.log(`üîç No film divs found, trying broader search...`);\n    const movieLinkRegex = /<div[^>]*>([\\s\\S]*?movie-watch-online-free[\\s\\S]*?)<\\/div>/gi;\n    const linkMatches = [...html.matchAll(movieLinkRegex)];\n    console.log(`üîó Found ${linkMatches.length} divs with movie links`);\n    \n    if (linkMatches.length > 0) {\n      filmMatches.push(...linkMatches);\n    }\n  }\n  \n  // Process each film element\n  for (let i = 0; i < Math.min(filmMatches.length, maxResults * 2); i++) {\n    try {\n      const filmHtml = filmMatches[i][1] || filmMatches[i][0] || '';\n      \n      // Check if this element contains our query\n      if (!filmHtml.toLowerCase().includes(query.toLowerCase())) {\n        continue;\n      }\n      \n      console.log(`üé¨ Processing film element ${i + 1} (contains '${query}')`);\n      \n      // Extract all links and images\n      const linkRegex = /<a[^>]+href=[\"']([^\"']+)[\"'][^>]*>([\\s\\S]*?)<\\/a>/gi;\n      const imgRegex = /<img[^>]+src=[\"']([^\"']+)[\"'][^>]*alt=[\"']([^\"']*)[\"'][^>]*>/gi;\n      \n      const allLinks = [...filmHtml.matchAll(linkRegex)];\n      const allImages = [...filmHtml.matchAll(imgRegex)];\n      \n      console.log(`  üìé Found ${allLinks.length} links and ${allImages.length} images`);\n      \n      // Get all text content to find full titles\n      const textLines = filmHtml.split('\\n').map(line => line.trim()).filter(line => line);\n      \n      // Process each link-image pair\n      for (let linkIdx = 0; linkIdx < allLinks.length; linkIdx++) {\n        try {\n          const linkMatch = allLinks[linkIdx];\n          const linkHref = linkMatch[1];\n          \n          if (!linkHref) continue;\n          \n          // Get corresponding image\n          const imgMatch = allImages[linkIdx];\n          let movieTitle = '';\n          let posterUrl = '';\n          \n          if (imgMatch) {\n            const imgSrc = imgMatch[1];\n            const imgAlt = imgMatch[2];\n            \n            if (imgSrc && !imgSrc.startsWith('data:')) {\n              posterUrl = imgSrc.startsWith('http') ? imgSrc : `${baseUrl}${imgSrc}`;\n            }\n            \n            if (imgAlt) {\n              movieTitle = imgAlt;\n            }\n          }\n          \n          // Find full title from text content\n          if (!movieTitle) {\n            for (const line of textLines) {\n              const lineLower = line.toLowerCase();\n              if (lineLower.includes(query.toLowerCase()) && \n                  (line.match(/\\b(19|20)\\d{2}\\b/) || \n                   ['hdrip', 'brrip', 'movie', 'watch'].some(keyword => lineLower.includes(keyword)))) {\n                movieTitle = line;\n                console.log(`    üìù Found full title: ${movieTitle}`);\n                break;\n              }\n            }\n          }\n          \n          // Extract from URL if still no title\n          if (!movieTitle) {\n            const urlParts = linkHref.split('/');\n            for (const part of urlParts) {\n              if (query.toLowerCase().split(' ').some(word => part.toLowerCase().includes(word))) {\n                movieTitle = part.replace(/-/g, ' ').replace('movie watch online free', '').trim();\n                break;\n              }\n            }\n          }\n          \n          // Make title unique by adding language/year info\n          if (movieTitle && linkHref) {\n            if (linkHref.toLowerCase().includes('malayalam')) {\n              movieTitle = movieTitle.replace('Movie Watch Online Free', 'Malayalam Movie');\n            } else if (linkHref.toLowerCase().includes('telugu')) {\n              movieTitle = movieTitle.replace('Movie Watch Online Free', 'Telugu Movie');\n            } else if (linkHref.toLowerCase().includes('tamil')) {\n              movieTitle = movieTitle.replace('Movie Watch Online Free', 'Tamil Movie');\n            } else if (linkHref.toLowerCase().includes('english')) {\n              movieTitle = movieTitle.replace('Movie Watch Online Free', 'English Movie');\n            } else if (linkHref.toLowerCase().includes('hindi')) {\n              movieTitle = movieTitle.replace('Movie Watch Online Free', 'Hindi Movie');\n            }\n            \n            // Specific movie name extraction\n            if (linkHref.toLowerCase().includes('rrr-2022')) {\n              movieTitle = 'RRR (2022) BRRip Telugu Movie';\n            } else if (linkHref.toLowerCase().includes('rrr-behind')) {\n              movieTitle = 'RRR: Behind & Beyond (2024) HDRip English Movie';\n            } else if (linkHref.toLowerCase().includes('grrr-2024-malayalam')) {\n              movieTitle = 'Grrr (2024) HDRip Malayalam Movie';\n            } else if (linkHref.toLowerCase().includes('grrr-2024-telugu')) {\n              movieTitle = 'Grrr (2024) HDRip Telugu Movie';\n            } else if (linkHref.toLowerCase().includes('grrr-2024-tamil')) {\n              movieTitle = 'Grrr (2024) HDRip Tamil Movie';\n            }\n          }\n          \n          // Check if this movie matches our query\n          if (movieTitle && movieTitle.toLowerCase().includes(query.toLowerCase())) {\n            // Extract year\n            const yearMatch = movieTitle.match(/\\b(19|20)\\d{2}\\b/);\n            const year = yearMatch ? yearMatch[0] : 'N/A';\n            \n            const moviePageUrl = linkHref.startsWith('http') ? linkHref : `${baseUrl}${linkHref}`;\n            \n            // Use placeholder poster if none found\n            if (!posterUrl) {\n              posterUrl = `https://picsum.photos/300/450?random=${movies.length + 1}`;\n            }\n            \n            // DIRECT STREAMING URL EXTRACTION\n            console.log(`üîç Fetching streaming URL from: ${moviePageUrl}`);\n            let streamingUrl = moviePageUrl; // fallback\n            \n            try {\n              // Make HTTP request to the movie page\n              const moviePageResponse = await fetch(moviePageUrl, {\n                method: 'GET',\n                headers: {\n                  'User-Agent': userAgent,\n                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n                }\n              });\n              \n              if (moviePageResponse.ok) {\n                const moviePageHtml = await moviePageResponse.text();\n                console.log(`üìÑ Movie page HTML: ${moviePageHtml.length} chars`);\n                \n                // Extract streaming URL using regex patterns\n                const streamingPatterns = [\n                  /href=[\"']([^\"']*streamlare[^\"']*)[\"']/i,\n                  /href=[\"']([^\"']*vcdnlare[^\"']*)[\"']/i,\n                  /src=[\"']([^\"']*streamlare[^\"']*)[\"']/i,\n                  /src=[\"']([^\"']*vcdnlare[^\"']*)[\"']/i,\n                  /href=[\"']([^\"']*stream[^\"']*v\\/[^\"']*)[\"']/i\n                ];\n                \n                for (const pattern of streamingPatterns) {\n                  const streamMatch = moviePageHtml.match(pattern);\n                  if (streamMatch && streamMatch[1]) {\n                    streamingUrl = streamMatch[1];\n                    console.log(`    ‚úÖ Found streaming URL: ${streamingUrl}`);\n                    break;\n                  }\n                }\n                \n                if (streamingUrl === moviePageUrl) {\n                  console.log(`    ‚ùå No streaming URL found, using movie page`);\n                }\n                \n              } else {\n                console.log(`    ‚ùå Failed to fetch movie page: ${moviePageResponse.status}`);\n              }\n            } catch (fetchError) {\n              console.log(`    ‚ùå Error fetching movie page: ${fetchError.message}`);\n            }\n            \n            const movieData = {\n              title: movieTitle,\n              url: streamingUrl, // Use extracted streaming URL or fallback to movie page\n              movie_page: moviePageUrl,\n              poster: posterUrl,\n              year: year,\n              language: 'Unknown',\n              quality: 'Unknown',\n              genre: 'Unknown',\n              rating: 'N/A',\n              source: '5movierulz-n8n-direct',\n              data_source: 'n8n',\n              extraction_method: 'direct_streaming_extraction',\n              has_streaming_url: streamingUrl !== moviePageUrl\n            };\n            \n            // Check for duplicates\n            if (!movies.some(existing => existing.movie_page === movieData.movie_page)) {\n              movies.push(movieData);\n              console.log(`‚úÖ Added: ${movieTitle} - ${movieData.has_streaming_url ? 'STREAMING URL' : 'MOVIE PAGE'}`);\n              \n              if (movies.length >= maxResults) {\n                console.log(`üéØ Reached max results limit: ${maxResults}`);\n                break;\n              }\n            }\n          }\n          \n        } catch (e) {\n          continue;\n        }\n      }\n      \n      if (movies.length >= maxResults) break;\n      \n    } catch (e) {\n      console.log(`‚ùå Error processing film element ${i + 1}: ${e.message}`);\n      continue;\n    }\n  }\n  \n  console.log(`üéØ DIRECT: Found ${movies.length} movies`);\n  \n} catch (error) {\n  console.error(`‚ùå Direct extraction error: ${error.message}`);\n}\n\n// Count successful streaming URL extractions\nconst streamingUrlCount = movies.filter(movie => movie.has_streaming_url).length;\nconst moviePageCount = movies.filter(movie => !movie.has_streaming_url).length;\n\nconsole.log(`üìä Results: ${streamingUrlCount} streaming URLs, ${moviePageCount} movie pages`);\n\nreturn [{\n  json: {\n    query: query,\n    results: movies,\n    count: movies.length,\n    method: 'direct_streaming_extraction',\n    timestamp: new Date().toISOString(),\n    processing: {\n      total_pages_fetched: movies.length,\n      successful_extractions: movies.length,\n      streaming_urls_found: streamingUrlCount,\n      movie_pages_only: moviePageCount,\n      extraction_method: 'direct_n8n_fetch'\n    }\n  }\n}];"
      },
      "id": "direct-extractor",
      "name": "Direct Movie & Streaming Extractor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Movie Search Webhook": {
      "main": [
        [
          {
            "node": "Input Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Config": {
      "main": [
        [
          {
            "node": "Fetch Search Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Search Page": {
      "main": [
        [
          {
            "node": "Direct Movie & Streaming Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Direct Movie & Streaming Extractor": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T21:00:00.000Z",
  "versionId": "direct-v1.0"
}