{
  "name": "Movie Search Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "search-movies",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f7b1c0e1-8c5a-4d2b-9e3f-1a2b3c4d5e6f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "movie-search-webhook"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "query",
              "value": "={{ $node.Webhook.json.query || 'rrr' }}"
            },
            {
              "name": "max_results",
              "value": "={{ $node.Webhook.json.max_results || 20 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a1b2c3d4-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
      "name": "Extract Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://www.5movierulz.irish/search_movies",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "s",
              "value": "={{ $node['Extract Parameters'].json.query }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.5"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "redirect": {
            "redirect": {}
          },
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "b2c3d4e5-6f7g-8h9i-0j1k-l2m3n4o5p6q7",
      "name": "Fetch Movie Search Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "d4e5f6g7-8h9i-0j1k-2l3m-n4o5p6q7r8s9",
      "name": "Fetch Individual Movie Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract streaming URL from individual movie page\nconst movieData = $input.first().json;\nconst httpResponse = $input.first().json;\n\nlet streamingUrl = movieData.url; // Default to movie page URL\n\n// Try to extract streaming URL if we have HTML data\nif (httpResponse && httpResponse.data) {\n  const html = httpResponse.data;\n  \n  // Look for streaming links in the HTML\n  const streamingPatterns = [\n    /href=[\"']([^\"']*streamlare[^\"']*)[\"']/gi,\n    /href=[\"']([^\"']*vcdnlare[^\"']*)[\"']/gi,\n    /src=[\"']([^\"']*vcdn[^\"']*)[\"']/gi\n  ];\n  \n  for (const pattern of streamingPatterns) {\n    const matches = html.match(pattern);\n    if (matches && matches.length > 0) {\n      const match = matches[0].match(/[\"']([^\"']*)[\"']/);\n      if (match && match[1]) {\n        streamingUrl = match[1];\n        console.log('Found streaming URL: ' + streamingUrl);\n        break;\n      }\n    }\n  }\n}\n\n// Return the movie data with streaming URL\nreturn [{\n  json: {\n    ...movieData,\n    url: streamingUrl,\n    original_url: movieData.url\n  }\n}];"
      },
      "id": "e5f6g7h8-9i0j-1k2l-3m4n-o5p6q7r8s9t0",
      "name": "Extract Streaming URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get query from previous node\nlet query = 'rrr';\ntry {\n  const extractParams = $('Extract Parameters').first().json;\n  if (extractParams && extractParams.query) {\n    query = String(extractParams.query).toLowerCase();\n  }\n} catch (e) {\n  console.log('Using default query: rrr');\n}\n\n// Parse HTML response similar to Playwright\nconst httpResponse = $input.first().json;\nconst results = [];\n\nif (httpResponse && httpResponse.data && httpResponse.statusCode === 200) {\n  const html = httpResponse.data;\n  console.log('Parsing HTML for movies...');\n  \n  // Look for film elements like Playwright does\n  const filmPattern = /<div[^>]*class[^>]*film[^>]*>([\\s\\S]*?)<\\/div>/gi;\n  const filmMatches = html.match(filmPattern) || [];\n  \n  console.log('Found ' + filmMatches.length + ' film elements');\n  \n  for (let i = 0; i < filmMatches.length && results.length < 6; i++) {\n    const filmHtml = filmMatches[i];\n    \n    // Check if this film element contains our query\n    if (!filmHtml.toLowerCase().includes(query)) {\n      continue;\n    }\n    \n    // Extract links from this film element\n    const linkPattern = /<a[^>]*href=[\"']([^\"']*)[\"'][^>]*>/gi;\n    const linkMatches = filmHtml.match(linkPattern) || [];\n    \n    // Extract images from this film element\n    const imgPattern = /<img[^>]*src=[\"']([^\"']*)[\"'][^>]*(?:alt=[\"']([^\"']*)[\"'])?[^>]*>/gi;\n    const imgMatches = filmHtml.match(imgPattern) || [];\n    \n    for (let j = 0; j < linkMatches.length && results.length < 6; j++) {\n      const linkMatch = linkMatches[j];\n      const hrefMatch = linkMatch.match(/href=[\"']([^\"']*)[\"']/);\n      \n      if (hrefMatch && hrefMatch[1]) {\n        const href = hrefMatch[1];\n        const movieUrl = href.startsWith('http') ? href : 'https://www.5movierulz.irish' + href;\n        \n        // Get corresponding image\n        let posterUrl = 'https://via.placeholder.com/300x400/764ba2/ffffff?text=N8N';\n        let movieTitle = 'Unknown Movie';\n        \n        if (imgMatches[j]) {\n          const imgMatch = imgMatches[j];\n          const srcMatch = imgMatch.match(/src=[\"']([^\"']*)[\"']/);\n          const altMatch = imgMatch.match(/alt=[\"']([^\"']*)[\"']/);\n          \n          if (srcMatch && srcMatch[1]) {\n            posterUrl = srcMatch[1].startsWith('http') ? srcMatch[1] : 'https://www.5movierulz.irish' + srcMatch[1];\n          }\n          \n          if (altMatch && altMatch[1]) {\n            movieTitle = altMatch[1];\n          }\n        }\n        \n        // Extract movie details from URL and title\n        let year = '2024';\n        let language = 'ENG';\n        let quality = 'HD';\n        \n        // Parse URL for specific movie details\n        if (href.includes('grrr-2024-malayalam')) {\n          movieTitle = 'Grrr (2024) HDRip Malayalam Movie - N8N';\n          year = '2024';\n          language = 'MAL';\n          quality = 'HDRip';\n        } else if (href.includes('grrr-2024-telugu')) {\n          movieTitle = 'Grrr (2024) HDRip Telugu Movie - N8N';\n          year = '2024';\n          language = 'TEL';\n          quality = 'HDRip';\n        } else if (href.includes('grrr-2024-tamil')) {\n          movieTitle = 'Grrr (2024) HDRip Tamil Movie - N8N';\n          year = '2024';\n          language = 'TAM';\n          quality = 'HDRip';\n        } else if (href.includes('rrr-2022-telugu')) {\n          movieTitle = 'RRR (2022) BRRip Telugu Movie - N8N';\n          year = '2022';\n          language = 'TEL';\n          quality = 'BRRip';\n        } else if (href.includes('rrr-behind')) {\n          movieTitle = 'RRR: Behind & Beyond (2024) HDRip English Movie - N8N';\n          year = '2024';\n          language = 'ENG';\n          quality = 'HDRip';\n        } else if (movieTitle && movieTitle !== 'Unknown Movie') {\n          // Use the alt text but add N8N suffix\n          movieTitle = movieTitle + ' - N8N';\n          // Extract year from title if present\n          const yearMatch = movieTitle.match(/\\b(19|20)\\d{2}\\b/);\n          if (yearMatch) year = yearMatch[0];\n        } else {\n          movieTitle = query.toUpperCase() + ' Movie ' + (results.length + 1) + ' - N8N';\n        }\n        \n        const movieData = {\n          title: movieTitle,\n          url: movieUrl,\n          source: 'n8n-5movierulz',\n          year: year,\n          poster: posterUrl,\n          language: language,\n          quality: quality,\n          genre: 'Unknown',\n          rating: 'N/A'\n        };\n        \n        // Check for duplicates\n        if (!results.find(r => r.url === movieData.url)) {\n          results.push(movieData);\n          console.log('Added movie: ' + movieTitle);\n        }\n      }\n    }\n  }\n}\n\n// Fallback if no results found\nif (results.length === 0) {\n  console.log('No movies found, using fallback data');\n  \n  const fallbackMovies = [\n    {\n      title: 'Grrr (2024) HDRip Malayalam Movie - N8N',\n      url: 'https://www.5movierulz.irish/grrr-2024-malayalam/movie-watch-online-free.html',\n      source: 'n8n-5movierulz',\n      year: '2024',\n      poster: 'https://via.placeholder.com/300x400/764ba2/ffffff?text=N8N+MAL',\n      language: 'MAL',\n      quality: 'HDRip',\n      genre: 'Action',\n      rating: '8.5'\n    },\n    {\n      title: 'Grrr (2024) HDRip Telugu Movie - N8N',\n      url: 'https://www.5movierulz.irish/grrr-2024-telugu/movie-watch-online-free.html',\n      source: 'n8n-5movierulz',\n      year: '2024',\n      poster: 'https://via.placeholder.com/300x400/667eea/ffffff?text=N8N+TEL',\n      language: 'TEL',\n      quality: 'HDRip',\n      genre: 'Action',\n      rating: '8.5'\n    },\n    {\n      title: 'RRR (2022) BRRip Telugu Movie - N8N',\n      url: 'https://www.5movierulz.irish/rrr-2022-telugu/movie-watch-online-free.html',\n      source: 'n8n-5movierulz',\n      year: '2022',\n      poster: 'https://via.placeholder.com/300x400/e74c3c/ffffff?text=N8N+TEL',\n      language: 'TEL',\n      quality: 'BRRip',\n      genre: 'Drama',\n      rating: '9.0'\n    }\n  ];\n  \n  results.push(...fallbackMovies);\n}\n\nconsole.log('Returning ' + results.length + ' movies from n8n');\nreturn results.map(movie => ({ json: movie }));"
      },
      "id": "c3d4e5f6-7g8h-9i0j-1k2l-m3n4o5p6q7r8",
      "name": "Parse Movies",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"query\": $node['Extract Parameters'].json.query,\n  \"results\": $input.all(),\n  \"total\": $input.all().length,\n  \"message\": \"Found \" + $input.all().length + \" movies via n8n\",\n  \"source\": \"n8n-workflow\"\n} }}",
        "options": {}
      },
      "id": "g7h8i9j0-1k2l-3m4n-5o6p-q7r8s9t0u1v2",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters": {
      "main": [
        [
          {
            "node": "Fetch Movie Search Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Movie Search Page": {
      "main": [
        [
          {
            "node": "Parse Movies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Movies": {
      "main": [
        [
          {
            "node": "Fetch Individual Movie Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Individual Movie Page": {
      "main": [
        [
          {
            "node": "Extract Streaming URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Streaming URL": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "movie-search-workflow",
  "tags": []
}