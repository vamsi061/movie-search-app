{
  "meta": {
    "instanceId": "n8n-instance"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "movie-scraper-simple",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 300],
      "webhookId": "movie-scraper-simple"
    },
    {
      "parameters": {
        "jsCode": "const webhookData = $input.first().json;\nlet query = 'rrr';\n\nif (webhookData.query) {\n  query = webhookData.query;\n} else if (webhookData.body && webhookData.body.query) {\n  query = webhookData.body.query;\n}\n\nquery = String(query).trim();\nif (!query) {\n  query = 'rrr';\n}\n\nconst targetUrl = `https://www.5movierulz.villas/search_movies?s=${encodeURIComponent(query)}`;\n\nconsole.log('Search query:', query);\nconsole.log('Target URL:', targetUrl);\n\nreturn {\n  searchQuery: query,\n  targetUrl: targetUrl\n};"
      },
      "id": "prepare-search",
      "name": "Prepare Search",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.targetUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch-page",
      "name": "Fetch Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "const httpData = $input.first().json;\nconst searchQuery = $('Prepare Search').first().json.searchQuery;\n\nlet htmlContent = httpData.body || httpData.data || '';\n\nconsole.log('HTML length:', htmlContent.length);\nconsole.log('Search query:', searchQuery);\n\nconst movies = [];\n\nif (htmlContent.length < 1000) {\n  console.log('HTML too short, might be blocked');\n  return [];\n}\n\n// Simple link extraction\nconst linkPattern = /<a[^>]+href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>/gi;\nlet match;\n\nwhile ((match = linkPattern.exec(htmlContent)) !== null && movies.length < 6) {\n  const url = match[1];\n  const text = match[2];\n  \n  if (!url || !text) continue;\n  \n  // Check if this looks like a movie link\n  const urlLower = url.toLowerCase();\n  const textLower = text.toLowerCase();\n  const queryLower = searchQuery.toLowerCase();\n  \n  // Must contain search query and look like a movie\n  if ((urlLower.includes(queryLower) || textLower.includes(queryLower)) &&\n      (urlLower.includes('movie') || urlLower.includes('watch') || \n       textLower.includes('movie') || textLower.includes('watch') ||\n       textLower.includes(queryLower))) {\n    \n    // Skip navigation links\n    if (textLower.includes('home') || textLower.includes('contact') || \n        textLower.includes('about') || text === 'MovieRulz' ||\n        urlLower.includes('/genre/') || urlLower.includes('/year/')) {\n      continue;\n    }\n    \n    // Clean up the title\n    let title = text.trim();\n    if (title.length < 3 || title.length > 100) continue;\n    \n    // Make URL absolute\n    let fullUrl = url;\n    if (url.startsWith('/')) {\n      fullUrl = 'https://www.5movierulz.villas' + url;\n    }\n    \n    // Extract year\n    const yearMatch = title.match(/\\b(20\\d{2})\\b/);\n    const year = yearMatch ? yearMatch[1] : '2022';\n    \n    // Extract quality\n    const qualityMatch = title.match(/\\b(HD|HDRip|BRRip|1080p|720p|4K)\\b/i);\n    const quality = qualityMatch ? qualityMatch[1] : 'HD';\n    \n    const movie = {\n      title: title,\n      url: fullUrl,\n      image: `https://via.placeholder.com/300x450/667eea/ffffff?text=${encodeURIComponent(title.substring(0, 15))}`,\n      year: year,\n      rating: '8.0',\n      genre: 'Action, Drama',\n      quality: quality,\n      source: '5movierulz.villas',\n      searchQuery: searchQuery,\n      scrapedAt: new Date().toISOString()\n    };\n    \n    movies.push(movie);\n    console.log(`Found: ${title}`);\n  }\n}\n\nconsole.log(`Total movies found: ${movies.length}`);\nreturn movies;"
      },
      "id": "parse-simple",
      "name": "Parse Movies Simple",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "const movies = $input.all();\nconst searchQuery = movies[0]?.json?.searchQuery || 'rrr';\n\nconst movieList = movies.map(item => item.json).filter(movie => movie.title);\n\nconst result = {\n  searchQuery: searchQuery,\n  totalResults: movieList.length,\n  source: '5movierulz.villas',\n  scrapedAt: new Date().toISOString(),\n  status: 'success',\n  movies: movieList\n};\n\nconsole.log(`Final result: ${movieList.length} movies for \"${searchQuery}\"`);\nreturn result;"
      },
      "id": "format-final",
      "name": "Format Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://movie-search-app-5d0y.onrender.com/api/append-results",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "timeout": 15000
        }
      },
      "id": "send-results",
      "name": "Send to App",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\n\nreturn {\n  success: true,\n  message: 'Movies scraped and sent successfully',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "final-response",
      "name": "Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Prepare Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search": {
      "main": [
        [
          {
            "node": "Fetch Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Page": {
      "main": [
        [
          {
            "node": "Parse Movies Simple",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Movies Simple": {
      "main": [
        [
          {
            "node": "Format Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Results": {
      "main": [
        [
          {
            "node": "Send to App",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to App": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["movie-scraper", "simple", "reliable"],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "3"
}