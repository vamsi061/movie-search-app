{
  "meta": {
    "instanceId": "n8n-instance"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "movie-scraper-villas",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 300],
      "webhookId": "movie-scraper-villas"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate search query\nconst webhookData = $input.first().json;\nlet query = 'rrr'; // default fallback\n\n// Try multiple ways to extract query\nif (webhookData.query && webhookData.query.query) {\n  query = webhookData.query.query;\n} else if (webhookData.body && webhookData.body.query) {\n  query = webhookData.body.query;\n} else if (webhookData.query && typeof webhookData.query === 'string') {\n  query = webhookData.query;\n} else if (webhookData.searchQuery) {\n  query = webhookData.searchQuery;\n}\n\n// Clean and validate query\nquery = String(query).trim();\nif (!query || query === 'undefined' || query === 'null') {\n  query = 'rrr';\n}\n\n// Construct target URL for 5movierulz.villas\nconst targetUrl = `https://www.5movierulz.villas/search_movies?s=${encodeURIComponent(query)}`;\n\nconsole.log('Search query:', query);\nconsole.log('Target URL:', targetUrl);\n\nreturn {\n  searchQuery: query,\n  targetUrl: targetUrl,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "prepare-search",
      "name": "Prepare Search Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.targetUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.5"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            }
          ]
        },
        "options": {
          "timeout": 45000,
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 5
            }
          }
        }
      },
      "id": "http-scrape",
      "name": "HTTP Request Scrape",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse movie results from 5movierulz.villas HTML\nconst httpData = $input.first().json;\nconst searchQuery = $('Prepare Search Data').first().json.searchQuery;\n\nlet htmlContent = '';\nif (httpData.body) {\n  htmlContent = httpData.body;\n} else if (httpData.data) {\n  htmlContent = httpData.data;\n} else if (typeof httpData === 'string') {\n  htmlContent = httpData;\n}\n\nconsole.log('HTML content length:', htmlContent.length);\nconsole.log('Search query for parsing:', searchQuery);\n\nconst movies = [];\n\n// Check if we got blocked or redirected\nif (htmlContent.includes('Access Denied') || \n    htmlContent.includes('Cloudflare') || \n    htmlContent.includes('Just a moment') ||\n    htmlContent.length < 1000) {\n  console.log('Possible blocking detected');\n  return {\n    error: 'Site may be blocking requests',\n    htmlLength: htmlContent.length,\n    searchQuery: searchQuery\n  };\n}\n\n// Enhanced parsing for actual movie results\n// Look for movie links that contain the search query (dynamic)\nconst queryLower = searchQuery.toLowerCase();\nconst queryUpper = searchQuery.toUpperCase();\n\n// Escape special regex characters in search query\nconst escapeRegex = (str) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\nconst queryEscaped = escapeRegex(queryLower);\nconst queryUpperEscaped = escapeRegex(queryUpper);\n\n// Build regex pattern with proper escaping\nconst movieLinkPattern = new RegExp(`<a[^>]*href=\"([^\"]*(?:movie|watch|download)[^\"]*(?:${queryEscaped}|${queryUpperEscaped})[^\"]*|[^\"]*(?:${queryEscaped}|${queryUpperEscaped})[^\"]*(?:movie|watch|download)[^\"]*|[^\"]*\\/${queryEscaped}[^\"]*|[^\"]*-${queryEscaped}-[^\"]*|[^\"]*_${queryEscaped}_[^\"]*|[^\"]*${queryEscaped}[^\"]*(?:2022|2023|2024)[^\"]*|[^\"]*(?:2022|2023|2024)[^\"]*${queryEscaped}[^\"]*)\")`, 'gi');\n\nlet linkMatch;\nwhile ((linkMatch = movieLinkPattern.exec(htmlContent)) !== null) {\n  const url = linkMatch[1].trim();\n  \n  // Skip navigation and generic links\n  if (url.includes('home') || url.includes('contact') || url.includes('about') || \n      url.includes('category') || url.includes('genre') || url.includes('year') ||\n      url === 'https://www.5movierulz.villas' || url === '/' || url === '#') {\n    continue;\n  }\n  \n  // Extract title from URL or surrounding HTML\n  let title = '';\n  \n  // Try to get title from the link text\n  const linkTextPattern = new RegExp(`<a[^>]*href=\"${url.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\"[^>]*>([^<]+)<\\/a>`, 'i');\n  const linkTextMatch = linkTextPattern.exec(htmlContent);\n  \n  if (linkTextMatch) {\n    title = linkTextMatch[1].trim();\n  } else {\n    // Extract title from URL\n    const urlParts = url.split('/');\n    const lastPart = urlParts[urlParts.length - 1];\n    title = lastPart.replace(/[-_]/g, ' ').replace(/\\.(html|php)$/, '');\n  }\n  \n  // Clean and validate title\n  title = title.replace(/\\s+/g, ' ').trim();\n  \n  // Skip if title is too generic or doesn't contain search query\n  if (!title || title.length < 3 || title.length > 100 ||\n      ['Home', 'MovieRulz', 'Contact', 'About', 'Privacy', 'DMCA'].includes(title) ||\n      !title.toLowerCase().includes(searchQuery.toLowerCase())) {\n    continue;\n  }\n  \n  // Ensure absolute URL\n  let fullUrl = url;\n  if (url.startsWith('/')) {\n    fullUrl = 'https://www.5movierulz.villas' + url;\n  }\n  \n  // Extract year from title or URL\n  const yearMatch = title.match(/\\b(20\\d{2})\\b/) || url.match(/\\b(20\\d{2})\\b/);\n  const year = yearMatch ? yearMatch[1] : '2022';\n  \n  // Extract quality from title\n  const qualityMatch = title.match(/\\b(HDRip|BRRip|DVDRip|HD|4K|1080p|720p|CAM|TS)\\b/i);\n  const quality = qualityMatch ? qualityMatch[1] : 'HD';\n  \n  // Extract language from title\n  const langMatch = title.match(/\\b(Hindi|Telugu|Tamil|Malayalam|Kannada|English)\\b/i);\n  const language = langMatch ? langMatch[1] : 'Multi';\n  \n  const movie = {\n    title: title,\n    url: fullUrl,\n    image: `https://via.placeholder.com/300x450/667eea/ffffff?text=${encodeURIComponent(title.substring(0, 20))}`,\n    year: year,\n    rating: '8.5',\n    genre: `Action, Drama`,\n    quality: quality,\n    language: language,\n    source: '5movierulz.villas',\n    searchQuery: searchQuery,\n    scrapedAt: new Date().toISOString()\n  };\n  \n  movies.push(movie);\n  console.log(`Found movie: ${title}`);\n  \n  // Limit results\n  if (movies.length >= 6) {\n    break;\n  }\n}\n\n// If no specific matches, try broader search\nif (movies.length === 0) {\n  console.log('No specific matches, trying broader search...');\n  \n  // Look for any links containing the search query\n  const broadPattern = new RegExp(`<a[^>]*href=\"([^\"]*${searchQuery}[^\"]*)\">([^<]+)<\\/a>`, 'gi');\n  let broadMatch;\n  \n  while ((broadMatch = broadPattern.exec(htmlContent)) !== null && movies.length < 6) {\n    const url = broadMatch[1].trim();\n    const title = broadMatch[2].trim();\n    \n    // Skip generic links\n    if (title.length < 5 || ['Home', 'Contact', 'About'].includes(title)) {\n      continue;\n    }\n    \n    let fullUrl = url;\n    if (url.startsWith('/')) {\n      fullUrl = 'https://www.5movierulz.villas' + url;\n    }\n    \n    movies.push({\n      title: title,\n      url: fullUrl,\n      image: `https://via.placeholder.com/300x450/764ba2/ffffff?text=${encodeURIComponent(title.substring(0, 15))}`,\n      year: '2022',\n      rating: '8.0',\n      genre: 'Action',\n      source: '5movierulz.villas',\n      searchQuery: searchQuery,\n      scrapedAt: new Date().toISOString()\n    });\n  }\n}\n\nconsole.log(`Found ${movies.length} movies for query: ${searchQuery}`);\n\n// Return each movie as separate item for n8n processing\nreturn movies;"
      },
      "id": "parse-movies",
      "name": "Parse Movie Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "2",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ]
        }
      },
      "id": "filter-valid",
      "name": "Filter Valid Movies",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all movies and format final response\nconst movies = $input.all();\nconst searchQuery = movies[0]?.json?.searchQuery || 'rrr';\n\n// Remove duplicates based on title\nconst uniqueMovies = [];\nconst seenTitles = new Set();\n\nfor (const movie of movies) {\n  const title = movie.json.title.toLowerCase().trim();\n  if (!seenTitles.has(title)) {\n    seenTitles.add(title);\n    uniqueMovies.push(movie.json);\n  }\n}\n\n// Sort by relevance (title similarity to search query)\nconst sortedMovies = uniqueMovies.sort((a, b) => {\n  const aRelevance = a.title.toLowerCase().includes(searchQuery.toLowerCase()) ? 1 : 0;\n  const bRelevance = b.title.toLowerCase().includes(searchQuery.toLowerCase()) ? 1 : 0;\n  return bRelevance - aRelevance;\n});\n\nconst finalResult = {\n  searchQuery: searchQuery,\n  totalResults: sortedMovies.length,\n  source: '5movierulz.villas',\n  scrapedAt: new Date().toISOString(),\n  scrapeMethod: 'http-request-advanced',\n  status: 'success',\n  movies: sortedMovies\n};\n\nconsole.log(`Final result: ${sortedMovies.length} unique movies for \"${searchQuery}\"`);\n\nreturn finalResult;"
      },
      "id": "format-results",
      "name": "Format Final Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://movie-search-app-5d0y.onrender.com/api/append-results",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "User-Agent": "n8n-movie-scraper/1.0"
          },
          "timeout": 30000
        }
      },
      "id": "send-to-app",
      "name": "Send to Your App",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "jsCode": "// Return success response for webhook\nconst inputData = $input.first().json;\n\nreturn {\n  success: true,\n  message: 'Movie scraping completed successfully',\n  searchQuery: inputData.searchQuery || 'unknown',\n  totalResults: inputData.totalResults || 0,\n  timestamp: new Date().toISOString(),\n  webhookResponse: {\n    status: 'completed',\n    data: inputData\n  }\n};"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1500, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Prepare Search Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search Data": {
      "main": [
        [
          {
            "node": "HTTP Request Scrape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Scrape": {
      "main": [
        [
          {
            "node": "Parse Movie Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Movie Results": {
      "main": [
        [
          {
            "node": "Filter Valid Movies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Movies": {
      "main": [
        [
          {
            "node": "Format Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Results": {
      "main": [
        [
          {
            "node": "Send to Your App",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Your App": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["movie-scraper", "5movierulz", "http-request"],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "2"
}