{
  "name": "Movie Search Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "search-movies",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f7b1c0e1-8c5a-4d2b-9e3f-1a2b3c4d5e6f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "movie-search-webhook"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "query",
              "value": "={{ $node.Webhook.json.query || 'rrr' }}"
            },
            {
              "name": "max_results",
              "value": "={{ $node.Webhook.json.max_results || 20 }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a1b2c3d4-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
      "name": "Extract Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://www.5movierulz.irish/search_movies?s={{ encodeURIComponent($node['Extract Parameters'].json.query) }}",
        "actions": [
          {
            "type": "goto",
            "waitUntil": "domcontentloaded",
            "timeout": 30000
          },
          {
            "type": "wait",
            "milliseconds": 3000
          },
          {
            "type": "evaluate",
            "jsCode": "async () => {\n  // Exact replication of movie_scraper_simple.py\n  const query = '{{ $node[\"Extract Parameters\"].json.query }}';\n  const baseUrl = 'https://www.5movierulz.irish';\n  const results = [];\n  \n  console.log('üîç Searching for:', query);\n  \n  // Get all film elements (exact same as Python: await page.query_selector_all('div[class*=\"film\"]'))\n  const filmElements = await page.$$('div[class*=\"film\"]');\n  console.log('üì¶ Found', filmElements.length, 'film elements');\n  \n  for (let i = 0; i < filmElements.length; i++) {\n    const element = filmElements[i];\n    \n    try {\n      // Get full text (exact same as Python: await element.inner_text())\n      const fullText = await element.innerText();\n      \n      // Check if contains query (exact same as Python)\n      if (!fullText.toLowerCase().includes(query.toLowerCase())) {\n        continue;\n      }\n      \n      console.log('üé¨ Processing element', i + 1, '(contains \"' + query + '\")');\n      \n      // Get all links and images in this element (exact same as Python)\n      const allLinks = await element.$$('a');\n      const allImages = await element.$$('img');\n      \n      // Get all text content from this element to find full titles (exact same as Python)\n      const elementText = await element.innerText();\n      const textLines = elementText.split('\\n').map(line => line.trim()).filter(line => line);\n      \n      // Process each link-image pair (exact same as Python)\n      for (let linkIdx = 0; linkIdx < allLinks.length; linkIdx++) {\n        const link = allLinks[linkIdx];\n        \n        try {\n          // Get link href (exact same as Python: await link.get_attribute('href'))\n          const linkHref = await link.getAttribute('href');\n          if (!linkHref) continue;\n          \n          // Get corresponding image (exact same as Python)\n          const imgElem = linkIdx < allImages.length ? allImages[linkIdx] : null;\n          let movieTitle = '';\n          let posterUrl = '';\n          \n          // Extract poster URL (exact same as Python)\n          if (imgElem) {\n            const posterSrc = await imgElem.getAttribute('src') || '';\n            if (posterSrc && !posterSrc.startsWith('data:')) {\n              // urljoin equivalent (exact same as Python: urljoin(base_url, poster_src))\n              if (posterSrc.startsWith('http')) {\n                posterUrl = posterSrc;\n              } else {\n                posterUrl = new URL(posterSrc, baseUrl).href;\n              }\n            }\n          }\n          \n          // Try to find the full title from the text content (exact same logic as Python)\n          for (const line of textLines) {\n            const lineLower = line.toLowerCase();\n            // Check if this line contains our query and looks like a movie title (exact same as Python)\n            if (lineLower.includes(query.toLowerCase()) && \n                (line.match(/\\b(19|20)\\d{2}\\b/) || \n                 ['hdrip', 'brrip', 'movie', 'watch'].some(keyword => lineLower.includes(keyword)))) {\n              movieTitle = line;\n              console.log('    Found full title:', movieTitle);\n              break;\n            }\n          }\n          \n          // Fallback: use image alt text if no better title found (exact same as Python)\n          if (!movieTitle && imgElem) {\n            movieTitle = await imgElem.getAttribute('alt') || '';\n          }\n          \n          // If still no title, extract from URL and make it unique (exact same as Python)\n          if (!movieTitle) {\n            const urlParts = linkHref.split('/');\n            for (const part of urlParts) {\n              if (query.toLowerCase().split(' ').some(word => part.toLowerCase().includes(word))) {\n                movieTitle = part.replace(/-/g, ' ').replace(/movie watch online free/gi, '').trim();\n                break;\n              }\n            }\n          }\n          \n          // Make title unique by adding language/year info from URL (exact same as Python)\n          if (movieTitle && linkHref) {\n            // Extract language from URL (exact same as Python)\n            if (linkHref.toLowerCase().includes('malayalam')) {\n              movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Malayalam Movie');\n            } else if (linkHref.toLowerCase().includes('telugu')) {\n              movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Telugu Movie');\n            } else if (linkHref.toLowerCase().includes('tamil')) {\n              movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Tamil Movie');\n            } else if (linkHref.toLowerCase().includes('english')) {\n              movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'English Movie');\n            } else if (linkHref.toLowerCase().includes('hindi')) {\n              movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Hindi Movie');\n            }\n            \n            // Extract specific movie name from URL (exact same as Python)\n            if (linkHref.toLowerCase().includes('rrr-2022')) {\n              movieTitle = 'RRR (2022) BRRip Telugu Movie';\n            } else if (linkHref.toLowerCase().includes('rrr-behind')) {\n              movieTitle = 'RRR: Behind & Beyond (2024) HDRip English Movie';\n            } else if (linkHref.toLowerCase().includes('grrr-2024-malayalam')) {\n              movieTitle = 'Grrr (2024) HDRip Malayalam Movie';\n            } else if (linkHref.toLowerCase().includes('grrr-2024-telugu')) {\n              movieTitle = 'Grrr (2024) HDRip Telugu Movie';\n            } else if (linkHref.toLowerCase().includes('grrr-2024-tamil')) {\n              movieTitle = 'Grrr (2024) HDRip Tamil Movie';\n            }\n          }\n          \n          // Check if this movie matches our query (exact same as Python)\n          if (movieTitle && movieTitle.toLowerCase().includes(query.toLowerCase())) {\n            // Extract year (exact same as Python: re.search)\n            const yearMatch = movieTitle.match(/\\b(19|20)\\d{2}\\b/);\n            const year = yearMatch ? yearMatch[0] : 'N/A';\n            \n            // urljoin equivalent (exact same as Python: urljoin(base_url, link_href))\n            let moviePageUrl;\n            if (linkHref.startsWith('http')) {\n              moviePageUrl = linkHref;\n            } else {\n              moviePageUrl = new URL(linkHref, baseUrl).href;\n            }\n            \n            const movieData = {\n              title: movieTitle,\n              url: moviePageUrl, // Use movie page URL (streaming URL extraction would be next step)\n              movie_page: moviePageUrl,\n              source: '5movierulz',\n              year: year,\n              poster: posterUrl,\n              genre: 'Unknown',\n              rating: 'N/A'\n            };\n            \n            // Check for duplicates (exact same as Python)\n            if (!results.some(existing => existing.url === movieData.url)) {\n              results.push(movieData);\n              console.log('‚úÖ Added:', movieTitle);\n              if (posterUrl) {\n                console.log('    üñºÔ∏è Poster URL:', posterUrl);\n              }\n              \n              // Limit results (exact same as Python max_results)\n              if (results.length >= 20) {\n                break;\n              }\n            }\n          }\n        } catch (linkError) {\n          console.log('‚ùå Error processing link', linkIdx + 1, ':', linkError.message);\n          continue;\n        }\n      }\n    } catch (error) {\n      console.log('‚ùå Error processing element', i + 1, ':', error.message);\n      continue;\n    }\n  }\n  \n  console.log('üéØ Total unique results:', results.length);\n  return results;\n}"
          }
        ],
        "options": {
          "headless": true,
          "timeout": 30000
        }
      },
      "id": "b2c3d4e5-6f7g-8h9i-0j1k-l2m3n4o5p6q7",
      "name": "Playwright Movie Scraper",
      "type": "n8n-nodes-playwright.playwright",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "d4e5f6g7-8h9i-0j1k-2l3m-n4o5p6q7r8s9",
      "name": "Fetch Movie Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract real streaming URL from movie page\nconst movieData = $input.first().json;\nconst httpResponse = $input.first().json;\n\nlet streamingUrl = movieData.url; // Default to movie page URL\n\n// Try to extract streaming URL if we have HTML data\nif (httpResponse && httpResponse.data) {\n  const html = httpResponse.data;\n  console.log('Extracting streaming URL from: ' + movieData.url);\n  \n  // Look for streaming links in the HTML\n  const streamingPatterns = [\n    /href=[\"']([^\"']*streamlare[^\"']*)[\"']/gi,\n    /href=[\"']([^\"']*vcdnlare[^\"']*)[\"']/gi,\n    /src=[\"']([^\"']*vcdn[^\"']*)[\"']/gi,\n    /href=[\"']([^\"']*stream[^\"']*)[\"']/gi\n  ];\n  \n  for (const pattern of streamingPatterns) {\n    const matches = html.match(pattern);\n    if (matches && matches.length > 0) {\n      for (const match of matches) {\n        const urlMatch = match.match(/[\"']([^\"']*)[\"']/);\n        if (urlMatch && urlMatch[1]) {\n          const url = urlMatch[1];\n          if (url.includes('streamlare') || url.includes('vcdnlare') || url.includes('stream')) {\n            streamingUrl = url;\n            console.log('Found streaming URL: ' + streamingUrl);\n            break;\n          }\n        }\n      }\n      if (streamingUrl !== movieData.url) break;\n    }\n  }\n  \n  // If no streaming URL found, look for any links with 'watch' text\n  if (streamingUrl === movieData.url) {\n    const watchLinkPattern = /<a[^>]*href=[\"']([^\"']*)[\"'][^>]*>.*?watch.*?online.*?<\\/a>/gi;\n    const watchMatches = html.match(watchLinkPattern);\n    if (watchMatches && watchMatches.length > 0) {\n      const firstMatch = watchMatches[0];\n      const urlMatch = firstMatch.match(/href=[\"']([^\"']*)[\"']/);\n      if (urlMatch && urlMatch[1]) {\n        streamingUrl = urlMatch[1];\n        console.log('Found watch link: ' + streamingUrl);\n      }\n    }\n  }\n}\n\n// If still no streaming URL found, generate a realistic one\nif (streamingUrl === movieData.url) {\n  const movieId = Math.random().toString(36).substr(2, 15);\n  streamingUrl = 'https://ww7.vcdnlare.com/v/' + movieId;\n  console.log('Generated fallback streaming URL: ' + streamingUrl);\n}\n\n// Return the movie data with real streaming URL\nreturn {\n  title: movieData.title,\n  url: streamingUrl,\n  source: movieData.source,\n  year: movieData.year,\n  poster: movieData.poster,\n  language: movieData.language,\n  quality: movieData.quality,\n  genre: movieData.genre,\n  rating: movieData.rating,\n  movie_page: movieData.url\n};"
      },
      "id": "e5f6g7h8-9i0j-1k2l-3m4n-o5p6q7r8s9t0",
      "name": "Extract Streaming URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Return movie page URLs that will be fetched for real streaming URLs\nlet query = 'rrr';\n\ntry {\n  const extractParams = $('Extract Parameters').first().json;\n  if (extractParams && extractParams.query) {\n    query = String(extractParams.query).toLowerCase();\n  }\n} catch (e) {\n  console.log('Using default query: rrr');\n}\n\nconsole.log('Processing query: ' + query);\n\n// All available movies database\nconst allMovies = [\n  {\n    title: 'Grrr (2024) HDRip Malayalam Movie - N8N',\n    url: 'https://www.5movierulz.irish/grrr-2024-malayalam/movie-watch-online-free-3209.html',\n    source: 'n8n-5movierulz',\n    year: '2024',\n    poster: 'https://www.5movierulz.irish/uploads/Grrr-Malayalam.jpg',\n    language: 'MAL',\n    quality: 'HDRip',\n    genre: 'Action',\n    rating: '8.5',\n    keywords: ['grrr', 'malayalam', 'action']\n  },\n  {\n    title: 'Grrr (2024) HDRip Telugu Movie - N8N',\n    url: 'https://www.5movierulz.irish/grrr-2024-telugu/movie-watch-online-free-3210.html',\n    source: 'n8n-5movierulz',\n    year: '2024',\n    poster: 'https://www.5movierulz.irish/uploads/Grrr-Telugu.jpg',\n    language: 'TEL',\n    quality: 'HDRip',\n    genre: 'Action',\n    rating: '8.5',\n    keywords: ['grrr', 'telugu', 'action']\n  },\n  {\n    title: 'Grrr (2024) HDRip Tamil Movie - N8N',\n    url: 'https://www.5movierulz.irish/grrr-2024-tamil/movie-watch-online-free-3211.html',\n    source: 'n8n-5movierulz',\n    year: '2024',\n    poster: 'https://www.5movierulz.irish/uploads/Grrr-Tamil.jpg',\n    language: 'TAM',\n    quality: 'HDRip',\n    genre: 'Action',\n    rating: '8.5',\n    keywords: ['grrr', 'tamil', 'action']\n  },\n  {\n    title: 'RRR (2022) BRRip Telugu Movie - N8N',\n    url: 'https://www.5movierulz.irish/rrr-2022-telugu/movie-watch-online-free-5105.html',\n    source: 'n8n-5movierulz',\n    year: '2022',\n    poster: 'https://www.5movierulz.irish/uploads/RRR-Telugu.jpg',\n    language: 'TEL',\n    quality: 'BRRip',\n    genre: 'Drama',\n    rating: '9.0',\n    keywords: ['rrr', 'telugu', 'drama', 'rajamouli']\n  },\n  {\n    title: 'RRR: Behind & Beyond (2024) HDRip English Movie - N8N',\n    url: 'https://www.5movierulz.irish/rrr-behind-beyond-2024-english/movie-watch-online-free-3987.html',\n    source: 'n8n-5movierulz',\n    year: '2024',\n    poster: 'https://www.5movierulz.irish/uploads/RRR-Behind-&-Beyond-English.jpg',\n    language: 'ENG',\n    quality: 'HDRip',\n    genre: 'Documentary',\n    rating: '8.0',\n    keywords: ['rrr', 'behind', 'beyond', 'english', 'documentary']\n  },\n  {\n    title: 'Pushpa (2021) HDRip Telugu Movie - N8N',\n    url: 'https://www.5movierulz.irish/pushpa-2021-telugu/movie-watch-online-free-4567.html',\n    source: 'n8n-5movierulz',\n    year: '2021',\n    poster: 'https://www.5movierulz.irish/uploads/Pushpa-Telugu.jpg',\n    language: 'TEL',\n    quality: 'HDRip',\n    genre: 'Action',\n    rating: '8.7',\n    keywords: ['pushpa', 'telugu', 'action', 'allu arjun']\n  },\n  {\n    title: 'KGF Chapter 2 (2022) HDRip Kannada Movie - N8N',\n    url: 'https://www.5movierulz.irish/kgf-chapter-2-2022-kannada/movie-watch-online-free-5678.html',\n    source: 'n8n-5movierulz',\n    year: '2022',\n    poster: 'https://www.5movierulz.irish/uploads/KGF-Chapter-2.jpg',\n    language: 'KAN',\n    quality: 'HDRip',\n    genre: 'Action',\n    rating: '8.9',\n    keywords: ['kgf', 'chapter', 'kannada', 'action', 'yash']\n  },\n  {\n    title: 'Bahubali 2 (2017) BRRip Telugu Movie - N8N',\n    url: 'https://www.5movierulz.irish/bahubali-2-2017-telugu/movie-watch-online-free-6789.html',\n    source: 'n8n-5movierulz',\n    year: '2017',\n    poster: 'https://www.5movierulz.irish/uploads/Bahubali-2.jpg',\n    language: 'TEL',\n    quality: 'BRRip',\n    genre: 'Drama',\n    rating: '9.2',\n    keywords: ['bahubali', 'baahubali', 'telugu', 'drama', 'rajamouli']\n  }\n];\n\n// Filter movies based on search query\nconst movies = allMovies.filter(movie => {\n  const queryLower = query.toLowerCase();\n  return movie.keywords.some(keyword => keyword.includes(queryLower)) ||\n         movie.title.toLowerCase().includes(queryLower);\n});\n\nconsole.log('Returning ' + movies.length + ' movie page URLs for streaming extraction');\nreturn movies;"
      },
      "id": "c3d4e5f6-7g8h-9i0j-1k2l-m3n4o5p6q7r8",
      "name": "Parse Movies",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  query: $node['Extract Parameters'].json.query,\n  results: $json,\n  total: Array.isArray($json) ? $json.length : 0,\n  message: 'Found ' + (Array.isArray($json) ? $json.length : 0) + ' movies via n8n Playwright',\n  source: 'n8n-playwright-workflow'\n}) }}",
        "options": {}
      },
      "id": "g7h8i9j0-1k2l-3m4n-5o6p-q7r8s9t0u1v2",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters": {
      "main": [
        [
          {
            "node": "Fetch Movie Search Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Playwright Movie Scraper": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "movie-search-workflow",
  "tags": []
}