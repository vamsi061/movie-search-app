{
  "meta": {
    "instanceId": "n8n-instance"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "movie-scraper-villas",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [100, 300],
      "webhookId": "movie-scraper-villas"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate search query\nconst webhookData = $input.first().json;\nlet query = 'rrr'; // default fallback\n\n// Try multiple ways to extract query\nif (webhookData.query && webhookData.query.query) {\n  query = webhookData.query.query;\n} else if (webhookData.body && webhookData.body.query) {\n  query = webhookData.body.query;\n} else if (webhookData.query && typeof webhookData.query === 'string') {\n  query = webhookData.query;\n} else if (webhookData.searchQuery) {\n  query = webhookData.searchQuery;\n}\n\n// Clean and validate query\nquery = String(query).trim();\nif (!query || query === 'undefined' || query === 'null') {\n  query = 'rrr';\n}\n\n// Construct target URL for 5movierulz.villas\nconst targetUrl = `https://www.5movierulz.villas/search_movies?s=${encodeURIComponent(query)}`;\n\nconsole.log('Search query:', query);\nconsole.log('Target URL:', targetUrl);\n\nreturn {\n  searchQuery: query,\n  targetUrl: targetUrl,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "prepare-search",
      "name": "Prepare Search Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.targetUrl }}",
        "waitTime": 5000,
        "output": "html"
      },
      "id": "playwright-scrape",
      "name": "Playwright Scrape",
      "type": "n8n-nodes-playwright.playwright",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse real movie results from Playwright HTML\nconst playwrightData = $input.first().json;\nconst searchQuery = $('Prepare Search Data').first().json.searchQuery;\n\nlet htmlContent = playwrightData.html || playwrightData.content || '';\n\nconsole.log('HTML content length:', htmlContent.length);\nconsole.log('Search query for parsing:', searchQuery);\n\nconst movies = [];\n\n// Check if we got valid HTML\nif (htmlContent.length < 1000) {\n  console.log('HTML too short, might be blocked or page not loaded');\n  return [];\n}\n\n// Real parsing for 5movierulz.villas\n// Look for movie containers with various possible selectors\nconst moviePatterns = [\n  // Pattern 1: Standard movie item containers\n  /<div[^>]*class=\"[^\"]*(?:ml-item|movie-item|item)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n  // Pattern 2: Article containers\n  /<article[^>]*class=\"[^\"]*item[^\"]*\"[^>]*>([\\s\\S]*?)<\\/article>/gi,\n  // Pattern 3: Any div with movie-related content\n  /<div[^>]*class=\"[^\"]*(?:post|entry|movie)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi\n];\n\nfor (const pattern of moviePatterns) {\n  let match;\n  while ((match = pattern.exec(htmlContent)) !== null && movies.length < 10) {\n    const itemHtml = match[1];\n    \n    // Extract title and link from the item\n    const titleLinkMatch = itemHtml.match(/<h[1-6][^>]*>\\s*<a[^>]*href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>\\s*<\\/h[1-6]>/i) ||\n                          itemHtml.match(/<a[^>]*href=\"([^\"]+)\"[^>]*class=\"[^\"]*title[^\"]*\"[^>]*>([^<]+)<\\/a>/i) ||\n                          itemHtml.match(/<a[^>]*href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>/i);\n    \n    if (titleLinkMatch) {\n      const url = titleLinkMatch[1].trim();\n      const title = titleLinkMatch[2].trim();\n      \n      // Skip navigation links\n      if (title.toLowerCase().includes('home') || \n          title.toLowerCase().includes('contact') || \n          title.toLowerCase().includes('about') ||\n          title === 'MovieRulz' ||\n          url.includes('/genre/') || \n          url.includes('/year/') ||\n          url.includes('/category/')) {\n        continue;\n      }\n      \n      // Must contain search query\n      if (!title.toLowerCase().includes(searchQuery.toLowerCase()) && \n          !url.toLowerCase().includes(searchQuery.toLowerCase())) {\n        continue;\n      }\n      \n      // Clean title\n      const cleanTitle = title.replace(/\\s+/g, ' ').trim();\n      if (cleanTitle.length < 3 || cleanTitle.length > 150) {\n        continue;\n      }\n      \n      // Make URL absolute\n      let fullUrl = url;\n      if (url.startsWith('/')) {\n        fullUrl = 'https://www.5movierulz.villas' + url;\n      }\n      \n      // Extract image\n      const imageMatch = itemHtml.match(/<img[^>]*src=\"([^\"]+)\"/i);\n      let image = imageMatch ? imageMatch[1] : '';\n      if (image && image.startsWith('/')) {\n        image = 'https://www.5movierulz.villas' + image;\n      }\n      if (!image) {\n        image = `https://via.placeholder.com/300x450/667eea/ffffff?text=${encodeURIComponent(cleanTitle.substring(0, 20))}`;\n      }\n      \n      // Extract metadata\n      const yearMatch = cleanTitle.match(/\\b(20\\d{2})\\b/) || itemHtml.match(/\\b(20\\d{2})\\b/);\n      const year = yearMatch ? yearMatch[1] : '2022';\n      \n      const qualityMatch = cleanTitle.match(/\\b(HDRip|BRRip|DVDRip|HD|4K|1080p|720p|CAM|TS|WebRip)\\b/i);\n      const quality = qualityMatch ? qualityMatch[1] : 'HD';\n      \n      const langMatch = cleanTitle.match(/\\b(Hindi|Telugu|Tamil|Malayalam|Kannada|English|Bengali)\\b/i);\n      const language = langMatch ? langMatch[1] : 'Multi';\n      \n      const movie = {\n        title: cleanTitle,\n        url: fullUrl,\n        image: image,\n        year: year,\n        rating: '8.0',\n        genre: 'Action, Drama',\n        quality: quality,\n        language: language,\n        source: '5movierulz.villas',\n        searchQuery: searchQuery,\n        scrapedAt: new Date().toISOString()\n      };\n      \n      movies.push(movie);\n      console.log(`Found movie: ${cleanTitle}`);\n    }\n  }\n  \n  // If we found movies with this pattern, break\n  if (movies.length > 0) {\n    break;\n  }\n}\n\n// If no movies found with structured parsing, try simple link extraction\nif (movies.length === 0) {\n  console.log('No structured results, trying simple link extraction...');\n  \n  const linkPattern = /<a[^>]*href=\"([^\"]+)\"[^>]*>([^<]+)<\\/a>/gi;\n  let linkMatch;\n  \n  while ((linkMatch = linkPattern.exec(htmlContent)) !== null && movies.length < 6) {\n    const url = linkMatch[1].trim();\n    const text = linkMatch[2].trim();\n    \n    // Must contain search query and look like a movie\n    if ((url.toLowerCase().includes(searchQuery.toLowerCase()) || \n         text.toLowerCase().includes(searchQuery.toLowerCase())) &&\n        (url.includes('movie') || url.includes('watch') || \n         text.includes('movie') || text.includes('watch') ||\n         url.includes(searchQuery.toLowerCase()))) {\n      \n      // Skip navigation\n      if (text.toLowerCase().includes('home') || \n          text.toLowerCase().includes('contact') || \n          text.toLowerCase().includes('about') ||\n          text === 'MovieRulz') {\n        continue;\n      }\n      \n      let fullUrl = url;\n      if (url.startsWith('/')) {\n        fullUrl = 'https://www.5movierulz.villas' + url;\n      }\n      \n      const movie = {\n        title: text.trim(),\n        url: fullUrl,\n        image: `https://via.placeholder.com/300x450/667eea/ffffff?text=${encodeURIComponent(text.substring(0, 15))}`,\n        year: '2022',\n        rating: '8.0',\n        genre: 'Action, Drama',\n        quality: 'HD',\n        source: '5movierulz.villas',\n        searchQuery: searchQuery,\n        scrapedAt: new Date().toISOString()\n      };\n      \n      movies.push(movie);\n      console.log(`Found link: ${text}`);\n    }\n  }\n}\n\nconsole.log(`Total movies found: ${movies.length}`);\nreturn movies;"
      },
      "id": "parse-movies",
      "name": "Parse Movie Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "2",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ]
        }
      },
      "id": "filter-valid",
      "name": "Filter Valid Movies",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all movies and format final response\nconst movies = $input.all();\nconst searchQuery = movies[0]?.json?.searchQuery || 'rrr';\n\n// Remove duplicates based on title\nconst uniqueMovies = [];\nconst seenTitles = new Set();\n\nfor (const movie of movies) {\n  const title = movie.json.title.toLowerCase().trim();\n  if (!seenTitles.has(title)) {\n    seenTitles.add(title);\n    uniqueMovies.push(movie.json);\n  }\n}\n\n// Sort by relevance (title similarity to search query)\nconst sortedMovies = uniqueMovies.sort((a, b) => {\n  const aRelevance = a.title.toLowerCase().includes(searchQuery.toLowerCase()) ? 1 : 0;\n  const bRelevance = b.title.toLowerCase().includes(searchQuery.toLowerCase()) ? 1 : 0;\n  return bRelevance - aRelevance;\n});\n\nconst finalResult = {\n  searchQuery: searchQuery,\n  totalResults: sortedMovies.length,\n  source: '5movierulz.villas',\n  scrapedAt: new Date().toISOString(),\n  scrapeMethod: 'http-request-advanced',\n  status: 'success',\n  movies: sortedMovies\n};\n\nconsole.log(`Final result: ${sortedMovies.length} unique movies for \"${searchQuery}\"`);\n\nreturn finalResult;"
      },
      "id": "format-results",
      "name": "Format Final Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://movie-search-app-5d0y.onrender.com/api/append-results",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "User-Agent": "n8n-movie-scraper/1.0"
          },
          "timeout": 30000
        }
      },
      "id": "send-to-app",
      "name": "Send to Your App",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "jsCode": "// Return success response for webhook\nconst inputData = $input.first().json;\n\nreturn {\n  success: true,\n  message: 'Movie scraping completed successfully',\n  searchQuery: inputData.searchQuery || 'unknown',\n  totalResults: inputData.totalResults || 0,\n  timestamp: new Date().toISOString(),\n  webhookResponse: {\n    status: 'completed',\n    data: inputData\n  }\n};"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1500, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Prepare Search Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search Data": {
      "main": [
        [
          {
            "node": "Playwright Scrape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Playwright Scrape": {
      "main": [
        [
          {
            "node": "Parse Movie Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Movie Results": {
      "main": [
        [
          {
            "node": "Filter Valid Movies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Movies": {
      "main": [
        [
          {
            "node": "Format Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Results": {
      "main": [
        [
          {
            "node": "Send to Your App",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Your App": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["movie-scraper", "5movierulz", "http-request"],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "2"
}