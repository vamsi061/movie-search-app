{
  "name": "Simple Movie Search Test - Multiple Results",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "test-search",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Test Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "test-search"
    },
    {
      "parameters": {
        "jsCode": "// Simple test to return multiple movie URLs\nconst query = $input.first().json.query || 'rrr';\nconst maxResults = parseInt($input.first().json.max_results || 5);\n\nconsole.log(`ðŸ§ª Testing multiple results for: ${query}`);\n\n// Create test movie URLs\nconst testMovies = [\n  {\n    movieUrl: 'https://www.5movierulz.chat/grrr-2024-malayalam/movie-watch-online-free-3209.html',\n    title: 'Grrr (2024) HDRip Malayalam Movie',\n    poster: 'https://picsum.photos/300/450?random=1',\n    year: '2024'\n  },\n  {\n    movieUrl: 'https://www.5movierulz.chat/grrr-2024-telugu/movie-watch-online-free-3210.html',\n    title: 'Grrr (2024) HDRip Telugu Movie',\n    poster: 'https://picsum.photos/300/450?random=2',\n    year: '2024'\n  },\n  {\n    movieUrl: 'https://www.5movierulz.chat/rrr-2022-telugu/movie-watch-online-free-5105.html',\n    title: 'RRR (2022) BRRip Telugu Movie',\n    poster: 'https://picsum.photos/300/450?random=3',\n    year: '2022'\n  },\n  {\n    movieUrl: 'https://www.5movierulz.chat/rrr-behind-beyond-2024-english/movie-watch-online-free-3987.html',\n    title: 'RRR: Behind & Beyond (2024) HDRip English Movie',\n    poster: 'https://picsum.photos/300/450?random=4',\n    year: '2024'\n  },\n  {\n    movieUrl: 'https://www.5movierulz.chat/grrr-2024-tamil/movie-watch-online-free-3211.html',\n    title: 'Grrr (2024) HDRip Tamil Movie',\n    poster: 'https://picsum.photos/300/450?random=5',\n    year: '2024'\n  }\n];\n\n// Filter based on query and limit results\nconst filteredMovies = testMovies\n  .filter(movie => movie.title.toLowerCase().includes(query.toLowerCase()))\n  .slice(0, maxResults)\n  .map((movie, index) => ({\n    ...movie,\n    microserviceUrl: 'https://movie-search-app-j9g7.onrender.com',\n    query: query,\n    index: index\n  }));\n\nconsole.log(`ðŸŽ¯ Returning ${filteredMovies.length} test movies`);\n\n// Return each movie as separate item for parallel processing\nreturn filteredMovies.map(movie => ({ json: movie }));"
      },
      "id": "create-test-movies",
      "name": "Create Test Movies",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.microserviceUrl }}/extract?url={{ encodeURIComponent($json.movieUrl) }}&title={{ encodeURIComponent($json.title) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "call-microservice",
      "name": "Call Microservice",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process microservice response\nconst input = $input.first().json;\nconst originalData = input.movieUrl ? input : $input.first().json;\nconst microserviceResponse = input.url ? input : (input.data || input);\n\nconsole.log(`ðŸŽ¬ Processing: ${originalData.title}`);\n\nconst streamingUrl = microserviceResponse.streaming_url || microserviceResponse.url;\nconst success = microserviceResponse.success !== false;\n\nconst movieData = {\n  title: originalData.title,\n  url: streamingUrl || originalData.movieUrl,\n  movie_page: originalData.movieUrl,\n  poster: originalData.poster,\n  year: originalData.year,\n  language: microserviceResponse.metadata?.language || 'Unknown',\n  quality: 'HDRip',\n  genre: 'Action',\n  rating: 'N/A',\n  source: '5movierulz-test',\n  data_source: 'n8n',\n  extraction_method: 'microservice_test',\n  microservice_success: success,\n  has_streaming_url: !!streamingUrl && streamingUrl !== originalData.movieUrl\n};\n\nconsole.log(`    âœ… Streaming URL: ${streamingUrl ? 'Found' : 'None'}`);\n\nreturn [{ json: movieData }];"
      },
      "id": "process-response",
      "name": "Process Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Combine all results\nconst allMovies = $input.all();\nconst query = allMovies[0]?.json?.query || 'test';\n\nconsole.log(`ðŸ”„ Combining ${allMovies.length} test results`);\n\nconst movieResults = allMovies.map(item => item.json).filter(movie => movie.title);\nconst streamingUrlCount = movieResults.filter(movie => movie.has_streaming_url).length;\n\nconsole.log(`âœ… Test results: ${movieResults.length} movies`);\nconsole.log(`    ðŸŽ¬ ${streamingUrlCount} with streaming URLs`);\n\nconst finalResponse = {\n  query: query,\n  results: movieResults,\n  count: movieResults.length,\n  method: 'test_microservice',\n  timestamp: new Date().toISOString(),\n  processing: {\n    total_processed: allMovies.length,\n    successful_extractions: movieResults.length,\n    streaming_urls_found: streamingUrlCount,\n    extraction_method: 'test_playwright_microservice'\n  }\n};\n\nreturn [{ json: finalResponse }];"
      },
      "id": "combine-results",
      "name": "Combine Test Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Test Webhook": {
      "main": [
        [
          {
            "node": "Create Test Movies",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Test Movies": {
      "main": [
        [
          {
            "node": "Call Microservice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Microservice": {
      "main": [
        [
          {
            "node": "Process Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Response": {
      "main": [
        [
          {
            "node": "Combine Test Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Test Results": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T20:00:00.000Z",
  "versionId": "test-v1.0"
}